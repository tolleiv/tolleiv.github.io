<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/categories/php/</link>
    <description>Recent content in Php on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Fri, 08 Aug 2008 17:30:00 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bye bye version 4...</title>
      <link>//blog.tolleiv.de/2008/08/bye-bye-version-4.../</link>
      <pubDate>Fri, 08 Aug 2008 17:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/08/bye-bye-version-4.../</guid>
      <description>Ten years ago Andi Gutmans and Zeev Suraski started to renew the old PHP3 core and in 1999 PHP4 was published and became really famous among Web-Developers.
Bute 5 years late the successor was published and since then everyone is wondering why the era of PHP4 will end.
Today is the magical 8-8-8 where PHP4 is no longer supported so for everyone who still runs PHP4 for some reason
YOU SHOW NOW REALLY HAVE A LOOK AT THIS PAGE: www.</description>
    </item>
    
    <item>
      <title>Iterator [GoF]</title>
      <link>//blog.tolleiv.de/2008/07/iterator-gof/</link>
      <pubDate>Mon, 07 Jul 2008 17:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/iterator-gof/</guid>
      <description>Lot&amp;rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&amp;rsquo;s always a list of ingredients at the beginning of the recipe. This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects?</description>
    </item>
    
    <item>
      <title>Null-Object Pattern</title>
      <link>//blog.tolleiv.de/2008/07/null-object-pattern/</link>
      <pubDate>Tue, 01 Jul 2008 17:58:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/null-object-pattern/</guid>
      <description>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&amp;rsquo;ll have to do this check also.
Instead of typing the &amp;ldquo;if(object == null)&amp;rdquo; phrase again and again, you could use the Null-Object pattern, you&amp;rsquo;ll see that this can make some situations much clearer.</description>
    </item>
    
    <item>
      <title>Fa√ßade [GoF]</title>
      <link>//blog.tolleiv.de/2008/06/fa%C3%A7ade-gof/</link>
      <pubDate>Mon, 16 Jun 2008 23:33:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/fa%C3%A7ade-gof/</guid>
      <description>If a child is in the mood to eat a fresh cookie it normally asks his granny for one. Like this:
Child: Grannyyyyy?
Granny: Yes my dear?
Child: Could you mix about 2 cups of sugar, 1&amp;frasl;2 cup of butter and 1&amp;frasl;2 cup of milk in a saucepan and boil it for a minute. And could you, after you removed the saucepan from the heat, mix in some cocoa powder and 3 cups quick cooking oats and form some cookies?</description>
    </item>
    
    <item>
      <title>Inherit abstract functions....</title>
      <link>//blog.tolleiv.de/2008/06/inherit-abstract-functions..../</link>
      <pubDate>Wed, 11 Jun 2008 20:28:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/inherit-abstract-functions..../</guid>
      <description>A error I find from time to time when I work with inheritance is this one:
Fatal error: Can&amp;rsquo;t inherit abstract function Cookie::setFlavor() (previously declared abstract in ChocolateCookie) in &amp;hellip;
This happens when you try to define multiple abstract classes or interfaces with the same abstract functions - it&amp;rsquo;s right that this errors shows up, but today I stuck on this error for a while because I did not see the reason for that - so that&amp;rsquo;s a reminder for me ;)</description>
    </item>
    
    <item>
      <title>Self-extracting PHP archive</title>
      <link>//blog.tolleiv.de/2008/06/self-extracting-php-archive/</link>
      <pubDate>Sat, 07 Jun 2008 21:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/self-extracting-php-archive/</guid>
      <description>The __halt_compiler(); function in php enables to store some additional data in a php-file without blowing up the memory. A very nice possibility is to use this for a self-extracting php file as installation-packages of your php application. A wile ago I created a script which automatically creates such a archive and I think you might like it&amp;hellip;.for the impatient ones: Download / Download as Zip.
Before I start to show how the entire script works I&amp;rsquo;d like to show you a small example so that you can see how the __halt_compiler(); function can be used to store some data at the end of a file:</description>
    </item>
    
    <item>
      <title>Comparing PHP Best Practises</title>
      <link>//blog.tolleiv.de/2008/06/comparing-php-best-practises/</link>
      <pubDate>Mon, 02 Jun 2008 15:37:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/comparing-php-best-practises/</guid>
      <description>If you&amp;rsquo;re still wondering whether the single- or double quotes are processed faster in PHP you might want to look at phpbench.com. They don&amp;rsquo;t provide any ground breaking new insights, but they show in a very nice way what&amp;rsquo;s best pratice when it comes to arrays, strings and loops&amp;hellip;</description>
    </item>
    
    <item>
      <title>Value Object [DDD]</title>
      <link>//blog.tolleiv.de/2008/05/value-object-ddd/</link>
      <pubDate>Fri, 30 May 2008 04:39:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/value-object-ddd/</guid>
      <description>This metaphor does not fit completely, and the &amp;ldquo;Money-Example&amp;rdquo; is omnipresent, but I really like the pattern and so that&amp;rsquo;s the story:
Let&amp;rsquo;s say you have your grannies recipe for a chocolate cookie and you want to keep this in mind, but also you like to somehow experiment with some new or different ingredients. Normally you just keep in mind what you changed and later you write down the new recipe.</description>
    </item>
    
    <item>
      <title>PHP FastCGI vs. PHP as a module</title>
      <link>//blog.tolleiv.de/2008/05/php-fastcgi-vs.-php-as-a-module/</link>
      <pubDate>Sat, 24 May 2008 17:40:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/php-fastcgi-vs.-php-as-a-module/</guid>
      <description>The apachelounge.org guy published a very interesting stat which compares the memory-usage of PHP/FastCGI and PHP/as module and that&amp;rsquo;s really interesting:

There&amp;rsquo;s no comment about performance and in early versions FastCGI/PHP was a bottleneck but maybe these days are gone :)</description>
    </item>
    
    <item>
      <title>PHP sucks? not really!</title>
      <link>//blog.tolleiv.de/2008/05/php-sucks-not-really/</link>
      <pubDate>Thu, 22 May 2008 06:35:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/php-sucks-not-really/</guid>
      <description>There are so many people from outside of the PHP World and lots of them are complaining about PHP and their reasons are mostly so ridiculous. In most cases they just say that PHP code sucks.
The PHP 10.0 Blog brought up some good arguments about that and I fully agree - it&amp;rsquo;s not the language that produces sucking code, it&amp;rsquo;s the guy who wrote it down. Click</description>
    </item>
    
    <item>
      <title>error_reposting and exceptions....</title>
      <link>//blog.tolleiv.de/2008/05/error_reposting-and-exceptions..../</link>
      <pubDate>Tue, 20 May 2008 21:40:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/error_reposting-and-exceptions..../</guid>
      <description>I just found this line:
set_error_handler(create_function(&amp;lsquo;$x, $y&amp;rsquo;, &amp;lsquo;throw new Exception($y, $x);&amp;rsquo;), E_ALL~E_NOTICE);
in the comments on php.net and did a short test to see whether it works. Normally I used to have a global function which passes all the errors through a logging-chain (FILE/MAIL/DISPLAY) but having exceptions could be more comfortable because you might sometimes want to make decisions locally and not on a global scope and just setting and re-setting the error-handler is not the best idea for this&amp;hellip; I&amp;rsquo;m not sure if I get used to it, because the error-handling function did a good job for the last years &amp;hellip; we&amp;rsquo;ll see :)</description>
    </item>
    
    <item>
      <title>Preview to PHP 5.3</title>
      <link>//blog.tolleiv.de/2008/05/preview-to-php-5.3/</link>
      <pubDate>Mon, 19 May 2008 05:15:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/preview-to-php-5.3/</guid>
      <description>One of the mayor updates since PHP 5.0 is upcoming with the 5.3 version, this is also a major step forward to PHP 6 - I love to have namespaces and appreciate the split of E_NOTICE and E_DEPRECATED. Also other features like the native MySQL support ( I hope this really raises the performance), the array_replace/array_replace_recursive functions and also dynamic calls to static functions &amp;ldquo;$classname::$functionname($parameter);&amp;rdquo; sound very cool. So I really look forward to have it on the server (or at least on my laptop) :P</description>
    </item>
    
  </channel>
</rss>