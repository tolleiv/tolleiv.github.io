<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog.tolleiv.de ...  </title>
    <link>https://blog.tolleiv.de/categories/shellscript/index.xml</link>
    <description>Recent content on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <atom:link href="https://blog.tolleiv.de/categories/shellscript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>track time for a subroutine within a shell-script</title>
      <link>https://blog.tolleiv.de/2008/07/track-time-for-a-subroutine-within-a-shell-script/</link>
      <pubDate>Thu, 10 Jul 2008 21:55:00 +0000</pubDate>
      
      <guid>https://blog.tolleiv.de/2008/07/track-time-for-a-subroutine-within-a-shell-script/</guid>
      <description>&lt;p&gt;The following code-snippet is a shell-script which does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Track the time for a block of shell commands&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check if the time was less than x seconds (the example uses 10 seconds)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the block run through too fast the script waits/sleeps a few seconds&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run all this within a loop so that the block of shell-commands is executed periodically&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I used the script combined with a PHP script which processes a queue. The PHP script processes 1000 elements from the queue and takes about 30 seconds for that. Since just having a cronjob per minute would be not efficient enought I used this script.
The waiting-block is necessary because now and then the queue is empty &amp;hellip; but I think there are lot&amp;rsquo;s of situations where a script like this can be usefull:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
while [ 1 -ge 0 ]; do
time_begin=`date +%s`


###BLOCK 2 TRACK - BEGIN
number=$RANDOM
let &amp;quot;number %= 20&amp;quot;
sleep $number
###BLOCK 2 TRACK - END

time_end=`date +%s`
total=$((time_end-time_begin))

if [[ $total -ge 10 ]]; then
echo &amp;quot;time taken was: $number : $total&amp;quot;
else
echo &amp;quot;time take was too less  $number : $total&amp;quot;
sleep 10
fi
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>