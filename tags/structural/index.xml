<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structural on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/tags/structural/</link>
    <description>Recent content in Structural on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Mon, 12 May 2008 22:59:00 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/tags/structural/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Decorator [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/decorator-gof/</link>
      <pubDate>Mon, 12 May 2008 22:59:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/decorator-gof/</guid>
      <description>As the first pattern I&amp;rsquo;d like to introduce the decorator pattern - it&amp;rsquo;s one of the [GoF]- structural patterns. It enables to extend the functionality of a existing method by wrapping a so called decorator-object.
So maybe you already know the situation ;) , your granny is going to bake cookies and you think of how they gonna taste - so cookie is our main-object and the different additional spices and other options which refine the taste of the cookies are the decoration for it.</description>
    </item>
    
  </channel>
</rss>