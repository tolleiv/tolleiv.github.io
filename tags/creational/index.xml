<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creational on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/tags/creational/</link>
    <description>Recent content in Creational on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Fri, 20 Jun 2008 17:29:00 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/tags/creational/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Query Object [PoEEA]</title>
      <link>//blog.tolleiv.de/2008/06/query-object-poeea/</link>
      <pubDate>Fri, 20 Jun 2008 17:29:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/query-object-poeea/</guid>
      <description>Maybe you remember the Specification Pattern I explained some weeks ago. It enabled a easy and intuitive searching within large object-collections. A drawback of my example was that I stored the objects in the memory. This can be really ineffective if you want a single object out of hundreds, because you have to create all of them to see which one fits the specification. Normally you want to limit the number of objects and you also don&amp;rsquo;t store large datasets in memory.</description>
    </item>
    
    <item>
      <title>Plugin [PoEAA]</title>
      <link>//blog.tolleiv.de/2008/06/plugin-poeaa/</link>
      <pubDate>Thu, 05 Jun 2008 01:11:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/plugin-poeaa/</guid>
      <description>I&amp;rsquo;m sure you&amp;rsquo;re pretty often in the situation that you have to switch something depending on the context you&amp;rsquo;re currently in. For example most people change their eating habits before summer - I also do :P
Sometimes this is what you also want to have in your software. To achieve different behaviour you normally just implement two different classes or aggregates and since they have the same &amp;ldquo;meaning&amp;rdquo; they normally share a interface (a.</description>
    </item>
    
    <item>
      <title>Prototype [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/prototype-gof/</link>
      <pubDate>Tue, 27 May 2008 23:17:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/prototype-gof/</guid>
      <description>Imagine a cookie-oven which produces tasty cookies with chocolate crumbles. How do you ensure that the 1000th cookie still has the same taste as the first? You might think that this is an easy task - just write down the recipe and follow the described steps&amp;hellip;you know the result in real life - the 1000th cookie normally tasts like the 1st but you always had the &amp;ldquo;overhead&amp;rdquo; to read the recipe and go through the steps again and again.</description>
    </item>
    
    <item>
      <title>Singelton [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/singelton-gof/</link>
      <pubDate>Fri, 23 May 2008 21:40:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/singelton-gof/</guid>
      <description>Tis pattern is a very well know and a often discussed one.
Explaining it the tasty way: let&amp;rsquo;s say you have exactly one well know place where you store all your cookies and whenever you need one you can easy point to that place. Normally that&amp;rsquo;s really comfortable because whatever you do with it, you don&amp;rsquo;t have to search some place where you can find a cookie, you just go to that single &amp;ldquo;cookie tin&amp;rdquo; (or wherever you store cookies) and put a new cookie into it ;)</description>
    </item>
    
  </channel>
</rss>