<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behavioral on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/tags/behavioral/</link>
    <description>Recent content in Behavioral on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Mon, 07 Jul 2008 17:30:00 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/tags/behavioral/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Iterator [GoF]</title>
      <link>//blog.tolleiv.de/2008/07/iterator-gof/</link>
      <pubDate>Mon, 07 Jul 2008 17:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/iterator-gof/</guid>
      <description>Lot&amp;rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&amp;rsquo;s always a list of ingredients at the beginning of the recipe. This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects?</description>
    </item>
    
    <item>
      <title>Null-Object Pattern</title>
      <link>//blog.tolleiv.de/2008/07/null-object-pattern/</link>
      <pubDate>Tue, 01 Jul 2008 17:58:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/null-object-pattern/</guid>
      <description>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&amp;rsquo;ll have to do this check also.
Instead of typing the &amp;ldquo;if(object == null)&amp;rdquo; phrase again and again, you could use the Null-Object pattern, you&amp;rsquo;ll see that this can make some situations much clearer.</description>
    </item>
    
    <item>
      <title>Value Object [DDD]</title>
      <link>//blog.tolleiv.de/2008/05/value-object-ddd/</link>
      <pubDate>Fri, 30 May 2008 04:39:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/value-object-ddd/</guid>
      <description>This metaphor does not fit completely, and the &amp;ldquo;Money-Example&amp;rdquo; is omnipresent, but I really like the pattern and so that&amp;rsquo;s the story:
Let&amp;rsquo;s say you have your grannies recipe for a chocolate cookie and you want to keep this in mind, but also you like to somehow experiment with some new or different ingredients. Normally you just keep in mind what you changed and later you write down the new recipe.</description>
    </item>
    
    <item>
      <title>Memento [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/memento-gof/</link>
      <pubDate>Tue, 13 May 2008 07:59:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/memento-gof/</guid>
      <description>Let&amp;rsquo;s say you got a cookie from a repository your granny and you&amp;rsquo;re not sure if you like the new taste. Wouldn&amp;rsquo;t it be cool if you could just try it and revoke the operation first bite if you don&amp;rsquo;t like it?
In the world of OOP thats a easy job which can be handled by the so called memento pattern - you just save the inner state of the object within a memento object and revoke you actions whenever you like&amp;hellip;</description>
    </item>
    
  </channel>
</rss>