<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phpunit on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/tags/phpunit/</link>
    <description>Recent content in Phpunit on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Mon, 17 Aug 2009 21:38:45 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/tags/phpunit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>multiple arguments for mocked functions....</title>
      <link>//blog.tolleiv.de/2009/08/multiple-arguments-for-mocked-functions..../</link>
      <pubDate>Mon, 17 Aug 2009 21:38:45 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2009/08/multiple-arguments-for-mocked-functions..../</guid>
      <description>If you look into the PHPUnit documentation (http://www.phpunit.de/manual/3.3/en/test-doubles.html#test-doubles.mock-objects ) you&amp;rsquo;ll see some nice examples but non of them shows how to translate a function with multiple arguments into a mock-assumption.
Within the examples you&amp;rsquo;ll find: $observer-&amp;gt;expects($this-&amp;gt;once())-&amp;gt;method(&#39;update&#39;) -&amp;gt;with($this-&amp;gt;equalTo(&#39;something&#39;)); 
So what if the &amp;ldquo;update&amp;rdquo; function has two arguments, pretty easy: $observer-&amp;gt;expects($this-&amp;gt;once())-&amp;gt;method(&#39;update&#39;) -&amp;gt;with($this-&amp;gt;equalTo(&#39;something&#39;), $this-&amp;gt;equalTo(&#39;something else&#39;)); 
I guess Sebastian though that that there&amp;rsquo;s no need for documentation if something is so obvious :(</description>
    </item>
    
    <item>
      <title>Using Mocks within Tests</title>
      <link>//blog.tolleiv.de/2008/05/using-mocks-within-tests/</link>
      <pubDate>Sat, 17 May 2008 20:02:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/using-mocks-within-tests/</guid>
      <description>Let&amp;rsquo;s say you have some kind of process which creates cookies and which requires the cookies to bake before you deliver them to the customers. This process somehow touches two kinds of objects the cookie itself and a object which performs the process - the cookie oven. When you start to develop the oven how do you check whether the cookies are really baked or not? Since you can&amp;rsquo;t get rid of the dependency between the oven and the cookie, you have to simulate a real object and do the checks by hand - but wait there&amp;rsquo;s already a way to resolve it: PHPUnit ships with a very nice and comfortable function to create and check mock-objects and that&amp;rsquo;s exactly what we need in this situation where we somehow need to find out if our cookie really gets baked.</description>
    </item>
    
  </channel>
</rss>