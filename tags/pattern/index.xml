<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pattern on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/tags/pattern/</link>
    <description>Recent content in Pattern on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Wed, 30 Nov 2011 17:17:02 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/tags/pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Signal / Slots in Extbase</title>
      <link>//blog.tolleiv.de/2011/11/signal-/-slots-in-extbase/</link>
      <pubDate>Wed, 30 Nov 2011 17:17:02 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2011/11/signal-/-slots-in-extbase/</guid>
      <description>A nice thing to have at hand is definately Signal and Slots. I heard Felix talking about them quite often and I finally found a nice usecase and came to play with them a little bit this afternoon. And just to avoid that others have to look around too much to find how they can get them to work here&amp;rsquo;s how it&amp;rsquo;s working for me.
First of all you should understand the concept.</description>
    </item>
    
    <item>
      <title>Iterator [GoF]</title>
      <link>//blog.tolleiv.de/2008/07/iterator-gof/</link>
      <pubDate>Mon, 07 Jul 2008 17:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/iterator-gof/</guid>
      <description>Lot&amp;rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&amp;rsquo;s always a list of ingredients at the beginning of the recipe. This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects?</description>
    </item>
    
    <item>
      <title>Null-Object Pattern</title>
      <link>//blog.tolleiv.de/2008/07/null-object-pattern/</link>
      <pubDate>Tue, 01 Jul 2008 17:58:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/null-object-pattern/</guid>
      <description>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&amp;rsquo;ll have to do this check also.
Instead of typing the &amp;ldquo;if(object == null)&amp;rdquo; phrase again and again, you could use the Null-Object pattern, you&amp;rsquo;ll see that this can make some situations much clearer.</description>
    </item>
    
    <item>
      <title>Query Object [PoEEA]</title>
      <link>//blog.tolleiv.de/2008/06/query-object-poeea/</link>
      <pubDate>Fri, 20 Jun 2008 17:29:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/query-object-poeea/</guid>
      <description>Maybe you remember the Specification Pattern I explained some weeks ago. It enabled a easy and intuitive searching within large object-collections. A drawback of my example was that I stored the objects in the memory. This can be really ineffective if you want a single object out of hundreds, because you have to create all of them to see which one fits the specification. Normally you want to limit the number of objects and you also don&amp;rsquo;t store large datasets in memory.</description>
    </item>
    
    <item>
      <title>Plugin [PoEAA]</title>
      <link>//blog.tolleiv.de/2008/06/plugin-poeaa/</link>
      <pubDate>Thu, 05 Jun 2008 01:11:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/plugin-poeaa/</guid>
      <description>I&amp;rsquo;m sure you&amp;rsquo;re pretty often in the situation that you have to switch something depending on the context you&amp;rsquo;re currently in. For example most people change their eating habits before summer - I also do :P
Sometimes this is what you also want to have in your software. To achieve different behaviour you normally just implement two different classes or aggregates and since they have the same &amp;ldquo;meaning&amp;rdquo; they normally share a interface (a.</description>
    </item>
    
    <item>
      <title>Value Object [DDD]</title>
      <link>//blog.tolleiv.de/2008/05/value-object-ddd/</link>
      <pubDate>Fri, 30 May 2008 04:39:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/value-object-ddd/</guid>
      <description>This metaphor does not fit completely, and the &amp;ldquo;Money-Example&amp;rdquo; is omnipresent, but I really like the pattern and so that&amp;rsquo;s the story:
Let&amp;rsquo;s say you have your grannies recipe for a chocolate cookie and you want to keep this in mind, but also you like to somehow experiment with some new or different ingredients. Normally you just keep in mind what you changed and later you write down the new recipe.</description>
    </item>
    
    <item>
      <title>Prototype [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/prototype-gof/</link>
      <pubDate>Tue, 27 May 2008 23:17:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/prototype-gof/</guid>
      <description>Imagine a cookie-oven which produces tasty cookies with chocolate crumbles. How do you ensure that the 1000th cookie still has the same taste as the first? You might think that this is an easy task - just write down the recipe and follow the described steps&amp;hellip;you know the result in real life - the 1000th cookie normally tasts like the 1st but you always had the &amp;ldquo;overhead&amp;rdquo; to read the recipe and go through the steps again and again.</description>
    </item>
    
    <item>
      <title>Specification [DDD]</title>
      <link>//blog.tolleiv.de/2008/05/specification-ddd/</link>
      <pubDate>Thu, 15 May 2008 14:00:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/specification-ddd/</guid>
      <description>Maybe sometimes the cookie tin is filled with all sorts of cookies and only some of them are what you&amp;rsquo;d like in this special moment. Often it&amp;rsquo;s very easy to specify which cookie you like, but sometimes your wishes are very complex, for example if you look for grannies special cookie with chocolate, coconut and vanilla crumbles. This could lead into a real crumby problem if you try to sort all the cookies and then select eat the right one.</description>
    </item>
    
    <item>
      <title>Memento [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/memento-gof/</link>
      <pubDate>Tue, 13 May 2008 07:59:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/memento-gof/</guid>
      <description>Let&amp;rsquo;s say you got a cookie from a repository your granny and you&amp;rsquo;re not sure if you like the new taste. Wouldn&amp;rsquo;t it be cool if you could just try it and revoke the operation first bite if you don&amp;rsquo;t like it?
In the world of OOP thats a easy job which can be handled by the so called memento pattern - you just save the inner state of the object within a memento object and revoke you actions whenever you like&amp;hellip;</description>
    </item>
    
    <item>
      <title>Decorator [GoF]</title>
      <link>//blog.tolleiv.de/2008/05/decorator-gof/</link>
      <pubDate>Mon, 12 May 2008 22:59:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/decorator-gof/</guid>
      <description>As the first pattern I&amp;rsquo;d like to introduce the decorator pattern - it&amp;rsquo;s one of the [GoF]- structural patterns. It enables to extend the functionality of a existing method by wrapping a so called decorator-object.
So maybe you already know the situation ;) , your granny is going to bake cookies and you think of how they gonna taste - so cookie is our main-object and the different additional spices and other options which refine the taste of the cookies are the decoration for it.</description>
    </item>
    
  </channel>
</rss>