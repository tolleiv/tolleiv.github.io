<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog.tolleiv.de ...  </title>
    <link>https://blog.tolleiv.de/tags/varnish/index.xml</link>
    <description>Recent content on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <atom:link href="https://blog.tolleiv.de/tags/varnish/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TYPO3 login state and Varnish cache</title>
      <link>https://blog.tolleiv.de/2012/12/typo3-login-state-and-varnish-cache/</link>
      <pubDate>Mon, 10 Dec 2012 15:56:46 +0000</pubDate>
      
      <guid>https://blog.tolleiv.de/2012/12/typo3-login-state-and-varnish-cache/</guid>
      <description>

&lt;p&gt;Caching is hard in complex page setups with user specific content, especially when public pages change their content once a user is logged in. TYPO3 is smart enough to deal with the login state properly and cache appropriately. Once Varnish is involved, it&amp;rsquo;s quite tricky to cache as much as possible without loosing the dynamic content. But it&amp;rsquo;s not impossible and here&amp;rsquo;s my summary how we resolved it for &lt;a href=&#34;http://typo3.org&#34;&gt;typo3.org&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;

&lt;p&gt;The basic Varnish setup is more or less always the same and best described by&lt;a href=&#34;http://www.fabrizio-branca.de/nginx-varnish-apache-magento-typo3.html&#34;&gt; Farbrizio Branca&lt;/a&gt;. On top of that we need   some TypoScript parameter tweaking to get the cache-control-headers in TYPO3 straight - &lt;a href=&#34;http://www.typo3-media.com/blog/website-caching-login.html&#34;&gt;Daniel Pötzinger&amp;rsquo;s article&lt;/a&gt; covers them best. Another very handy thing which can be found in Fabrizio&amp;rsquo;s blog is the&lt;a href=&#34;http://www.fabrizio-branca.de/make-your-magento-store-fly-using-varnish.html&#34;&gt; simplified flow chart&lt;/a&gt; for the various &lt;a href=&#34;https://www.varnish-cache.org/trac/wiki/VCLExampleDefault&#34;&gt;Varnish subroutines&lt;/a&gt;.Based on that all pages should be cached properly and your site should run smoothly. But in case you have a page with personalized content, you&amp;rsquo;ll have to reconsider some parts.&lt;/p&gt;

&lt;h4 id=&#34;problem&#34;&gt;Problem&lt;/h4&gt;

&lt;p&gt;The&lt;a href=&#34;http://typo3.org/events/add-new-event/new/&#34;&gt; event submission page on typo3.org&lt;/a&gt; is a good example. In case the user is not logged in (a.k.a &lt;em&gt;public page&lt;/em&gt;), we just want to show a message which guides him to the login. If there&amp;rsquo;s a login active (a.k.a &lt;em&gt;user page&lt;/em&gt;), we&amp;rsquo;ll show the submission form instead. In both cases we could cache the content nicely, but how would we ensure that Varnish delivers the correct content?&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;Ajax could be a solution, but for large sites it&amp;rsquo;s usually smarter to avoid as much JavaScript as possible. EdgeSideIncludes (ESI) are another option, but I agree with &lt;a href=&#34;http://www.typo3-media.com/blog/website-caching-login.html&#34;&gt;Daniel&lt;/a&gt;, they&amp;rsquo;re not really useful in this case and I&amp;rsquo;d rather go with Ajax than with ESI.&lt;/p&gt;

&lt;p&gt;What we want in this scenario, is to cache the _public page _in Varnish and pass to the _user page_ generated by TYPO3 if we find that the user is logged in. But this should of course only happen on pages where this is really necessary - normal pages should just ignore the login state of the user. Therefore we need sth. to distinguish _normal_ from _login specific_ pages in Varnish. Lucky enough TYPO3 already provides a field in the pages properties which allows this distinction. Using the &lt;strong&gt;Login Behaviour (pages.fe_login_mode)&lt;/strong&gt; field, you can enable and disable the user-login for specific branches and pages*. As we want to whitelist _login specific_ pages, our root page should have the default setting &amp;ldquo;Disable Login&amp;rdquo; - this will be inherited to all sub-pages. All the _login specific_ pages should have the setting &amp;ldquo;Re-Enable login&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Once this is done, we need a way to carry that out to Varnish. We improved &lt;a href=&#34;http://forge.typo3.org/projects/extension-cacheinfo&#34;&gt;EXT:cacheinfo&lt;/a&gt; for that purpose, with that it now carries a &amp;ldquo;&lt;strong&gt;loginAllowedInBranch&lt;/strong&gt;&amp;rdquo; or &amp;ldquo;&lt;strong&gt;noLoginAllowedInBranch&lt;/strong&gt;&amp;rdquo; value in the &amp;ldquo;&lt;strong&gt;X-T3CacheInfo&amp;rdquo;&lt;/strong&gt; header. Using all that, the Varnish VCL can be extended to make use of it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sub vcl_hit {
  if (obj.http.X-T3CacheInfo ~ &amp;quot;loginAllowedInBranch&amp;quot;) {
    set obj.http.Cache-Control = &amp;quot;private&amp;quot;;
    if (req.http.Cookie ~ &amp;quot;(e_typo_user|PHPSESSID|_pk_.*)&amp;quot;) {
      # Do not cache requests which come from a logged in user
      return (pass);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is straight forward. For every page which allows logins, we make sure that the client does not keep them in his cache. In case we&amp;rsquo;re actually on such a page and find the related login-cookies, we pass the request along to TYPO3, otherwise we deliver the &lt;em&gt;public page&lt;/em&gt; right away from the cache. The fact that we pass the request along to TYPO3 in some cases doesn&amp;rsquo;t mean that we&amp;rsquo;ll deliver the &lt;em&gt;user page&lt;/em&gt;, it just indicates that we&amp;rsquo;ve to rely on TYPO3 to make the right choice based on the actual login state.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;For me the beauty here lies in the simplicity. Once you managed to wrap your head around the &lt;a href=&#34;http://www.fabrizio-branca.de/make-your-magento-store-fly-using-varnish.html&#34;&gt;flow chart&lt;/a&gt; and once you managed to deliver appropriate meta-data to Varnish, many more complex scenarios can be resolved equally.&lt;/p&gt;

&lt;p&gt;As most of the typo3.org stuff, this solution came from a great team. In this case &lt;a href=&#34;https://twitter.com/stucki&#34;&gt;Michael Stucki&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/danpoetz&#34;&gt;Daniel Pötzinger&lt;/a&gt; helped to craft the final solution - thanks guys :)&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;the naming of the field&amp;rsquo;s labels is really irritating - especially &amp;ldquo;0 - Enable login&amp;rdquo; should be &amp;ldquo;Inherit setting&amp;rdquo; as it really does not force any setting.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>