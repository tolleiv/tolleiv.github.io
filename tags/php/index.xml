<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on blog.tolleiv.de ...  </title>
    <link>//blog.tolleiv.de/tags/php/</link>
    <description>Recent content in Php on blog.tolleiv.de ...  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/tolleiv&#34;&gt;tolleiv&lt;/a&gt; 2016 - &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt; - Powered by Hugo</copyright>
    <lastBuildDate>Mon, 17 Aug 2009 21:38:45 +0000</lastBuildDate>
    
	<atom:link href="//blog.tolleiv.de/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>multiple arguments for mocked functions....</title>
      <link>//blog.tolleiv.de/2009/08/multiple-arguments-for-mocked-functions..../</link>
      <pubDate>Mon, 17 Aug 2009 21:38:45 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2009/08/multiple-arguments-for-mocked-functions..../</guid>
      <description>If you look into the PHPUnit documentation (http://www.phpunit.de/manual/3.3/en/test-doubles.html#test-doubles.mock-objects ) you&amp;rsquo;ll see some nice examples but non of them shows how to translate a function with multiple arguments into a mock-assumption.
Within the examples you&amp;rsquo;ll find: $observer-&amp;gt;expects($this-&amp;gt;once())-&amp;gt;method(&#39;update&#39;) -&amp;gt;with($this-&amp;gt;equalTo(&#39;something&#39;)); 
So what if the &amp;ldquo;update&amp;rdquo; function has two arguments, pretty easy: $observer-&amp;gt;expects($this-&amp;gt;once())-&amp;gt;method(&#39;update&#39;) -&amp;gt;with($this-&amp;gt;equalTo(&#39;something&#39;), $this-&amp;gt;equalTo(&#39;something else&#39;)); 
I guess Sebastian though that that there&amp;rsquo;s no need for documentation if something is so obvious :(</description>
    </item>
    
    <item>
      <title>www.encodechain.com</title>
      <link>//blog.tolleiv.de/2009/08/www.encodechain.com/</link>
      <pubDate>Sat, 08 Aug 2009 12:54:13 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2009/08/www.encodechain.com/</guid>
      <description>I just &amp;ldquo;released&amp;rdquo; encodechain.com. A little tool which enables to combine various popular PHP conversion methods and to check how they affect your input&amp;hellip; feel free to give me some feedback :)
I&amp;rsquo;m also not sure whether I choose the right name for it &amp;hellip; O_o</description>
    </item>
    
    <item>
      <title>PHP Best practice comparison</title>
      <link>//blog.tolleiv.de/2009/05/php-best-practice-comparison/</link>
      <pubDate>Thu, 28 May 2009 10:13:09 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2009/05/php-best-practice-comparison/</guid>
      <description>If you&amp;rsquo;re still wondering whether the single- or double quotes are processed faster in PHP you might want to look at phpbench.com. They don&amp;rsquo;t provide any ground breaking new insights, but they show in a very nice way what&amp;rsquo;s best pratice when it comes to arrays, strings and loops&amp;hellip;</description>
    </item>
    
    <item>
      <title>Iterator [GoF]</title>
      <link>//blog.tolleiv.de/2008/07/iterator-gof/</link>
      <pubDate>Mon, 07 Jul 2008 17:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/iterator-gof/</guid>
      <description>Lot&amp;rsquo;s of people like to write down things into lists, so that they can go through that list later and check whether everything was fine. Normally every recipe has a list ~ there&amp;rsquo;s always a list of ingredients at the beginning of the recipe. This short example shows how such a list can be processed in PHP. So why would you want to have something else than a array to hold your objects?</description>
    </item>
    
    <item>
      <title>Null-Object Pattern</title>
      <link>//blog.tolleiv.de/2008/07/null-object-pattern/</link>
      <pubDate>Tue, 01 Jul 2008 17:58:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/07/null-object-pattern/</guid>
      <description>Very often you create a object with a factory and before you really start using it, you check if your factory really created a object or returned NULL. Or maybe you have a method where a object is passed in and in this situation you&amp;rsquo;ll have to do this check also.
Instead of typing the &amp;ldquo;if(object == null)&amp;rdquo; phrase again and again, you could use the Null-Object pattern, you&amp;rsquo;ll see that this can make some situations much clearer.</description>
    </item>
    
    <item>
      <title>Self-extracting PHP archive</title>
      <link>//blog.tolleiv.de/2008/06/self-extracting-php-archive/</link>
      <pubDate>Sat, 07 Jun 2008 21:30:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/self-extracting-php-archive/</guid>
      <description>The __halt_compiler(); function in php enables to store some additional data in a php-file without blowing up the memory. A very nice possibility is to use this for a self-extracting php file as installation-packages of your php application. A wile ago I created a script which automatically creates such a archive and I think you might like it&amp;hellip;.for the impatient ones: Download / Download as Zip.
Before I start to show how the entire script works I&amp;rsquo;d like to show you a small example so that you can see how the __halt_compiler(); function can be used to store some data at the end of a file:</description>
    </item>
    
    <item>
      <title>Comparing PHP Best Practises</title>
      <link>//blog.tolleiv.de/2008/06/comparing-php-best-practises/</link>
      <pubDate>Mon, 02 Jun 2008 15:37:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/06/comparing-php-best-practises/</guid>
      <description>If you&amp;rsquo;re still wondering whether the single- or double quotes are processed faster in PHP you might want to look at phpbench.com. They don&amp;rsquo;t provide any ground breaking new insights, but they show in a very nice way what&amp;rsquo;s best pratice when it comes to arrays, strings and loops&amp;hellip;</description>
    </item>
    
    <item>
      <title>Value Object [DDD]</title>
      <link>//blog.tolleiv.de/2008/05/value-object-ddd/</link>
      <pubDate>Fri, 30 May 2008 04:39:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/value-object-ddd/</guid>
      <description>This metaphor does not fit completely, and the &amp;ldquo;Money-Example&amp;rdquo; is omnipresent, but I really like the pattern and so that&amp;rsquo;s the story:
Let&amp;rsquo;s say you have your grannies recipe for a chocolate cookie and you want to keep this in mind, but also you like to somehow experiment with some new or different ingredients. Normally you just keep in mind what you changed and later you write down the new recipe.</description>
    </item>
    
    <item>
      <title>PHP FastCGI vs. PHP as a module</title>
      <link>//blog.tolleiv.de/2008/05/php-fastcgi-vs.-php-as-a-module/</link>
      <pubDate>Sat, 24 May 2008 17:40:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/php-fastcgi-vs.-php-as-a-module/</guid>
      <description>The apachelounge.org guy published a very interesting stat which compares the memory-usage of PHP/FastCGI and PHP/as module and that&amp;rsquo;s really interesting:

There&amp;rsquo;s no comment about performance and in early versions FastCGI/PHP was a bottleneck but maybe these days are gone :)</description>
    </item>
    
    <item>
      <title>PHP sucks? not really!</title>
      <link>//blog.tolleiv.de/2008/05/php-sucks-not-really/</link>
      <pubDate>Thu, 22 May 2008 06:35:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/php-sucks-not-really/</guid>
      <description>There are so many people from outside of the PHP World and lots of them are complaining about PHP and their reasons are mostly so ridiculous. In most cases they just say that PHP code sucks.
The PHP 10.0 Blog brought up some good arguments about that and I fully agree - it&amp;rsquo;s not the language that produces sucking code, it&amp;rsquo;s the guy who wrote it down. Click</description>
    </item>
    
    <item>
      <title>Preview to PHP 5.3</title>
      <link>//blog.tolleiv.de/2008/05/preview-to-php-5.3/</link>
      <pubDate>Mon, 19 May 2008 05:15:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/preview-to-php-5.3/</guid>
      <description>One of the mayor updates since PHP 5.0 is upcoming with the 5.3 version, this is also a major step forward to PHP 6 - I love to have namespaces and appreciate the split of E_NOTICE and E_DEPRECATED. Also other features like the native MySQL support ( I hope this really raises the performance), the array_replace/array_replace_recursive functions and also dynamic calls to static functions &amp;ldquo;$classname::$functionname($parameter);&amp;rdquo; sound very cool. So I really look forward to have it on the server (or at least on my laptop) :P</description>
    </item>
    
    <item>
      <title>Using Mocks within Tests</title>
      <link>//blog.tolleiv.de/2008/05/using-mocks-within-tests/</link>
      <pubDate>Sat, 17 May 2008 20:02:00 +0000</pubDate>
      
      <guid>//blog.tolleiv.de/2008/05/using-mocks-within-tests/</guid>
      <description>Let&amp;rsquo;s say you have some kind of process which creates cookies and which requires the cookies to bake before you deliver them to the customers. This process somehow touches two kinds of objects the cookie itself and a object which performs the process - the cookie oven. When you start to develop the oven how do you check whether the cookies are really baked or not? Since you can&amp;rsquo;t get rid of the dependency between the oven and the cookie, you have to simulate a real object and do the checks by hand - but wait there&amp;rsquo;s already a way to resolve it: PHPUnit ships with a very nice and comfortable function to create and check mock-objects and that&amp;rsquo;s exactly what we need in this situation where we somehow need to find out if our cookie really gets baked.</description>
    </item>
    
  </channel>
</rss>